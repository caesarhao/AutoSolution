//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AML.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace a2mlcsharp {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class AMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, Begin=24, 
		End=25, CIdent=26, WS=27, STRING=28, SIGN=29, NUMBER=30, BlockComment=31, 
		LineComment=32;
	public const int
		RULE_a2ml = 0, RULE_declaration = 1, RULE_type_definition = 2, RULE_type_name = 3, 
		RULE_predefined_type_name = 4, RULE_block_definition = 5, RULE_enum_type_name = 6, 
		RULE_enumerator_list = 7, RULE_enumerator = 8, RULE_struct_type_name = 9, 
		RULE_struct_member_list = 10, RULE_struct_member = 11, RULE_member = 12, 
		RULE_array_specifier = 13, RULE_taggedstruct_type_name = 14, RULE_taggedstruct_member_list = 15, 
		RULE_taggedstruct_member = 16, RULE_taggedstruct_definition = 17, RULE_taggedunion_type_name = 18, 
		RULE_taggedunion_member_list = 19, RULE_tagged_union_member = 20, RULE_identifier = 21, 
		RULE_tag = 22, RULE_keyword = 23, RULE_constant = 24;
	public static readonly string[] ruleNames = {
		"a2ml", "declaration", "type_definition", "type_name", "predefined_type_name", 
		"block_definition", "enum_type_name", "enumerator_list", "enumerator", 
		"struct_type_name", "struct_member_list", "struct_member", "member", "array_specifier", 
		"taggedstruct_type_name", "taggedstruct_member_list", "taggedstruct_member", 
		"taggedstruct_definition", "taggedunion_type_name", "taggedunion_member_list", 
		"tagged_union_member", "identifier", "tag", "keyword", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'A2ML'", "';'", "'char'", "'int'", "'long'", "'uchar'", "'uint'", 
		"'ulong'", "'double'", "'float'", "'block'", "'enum'", "'{'", "'}'", "','", 
		"'='", "'struct'", "'['", "']'", "'taggedstruct'", "'('", "')*;'", "'taggedunion'", 
		"'/begin'", "'/end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Begin", "End", "CIdent", "WS", "STRING", "SIGN", "NUMBER", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class A2mlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(AMLParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(AMLParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public A2mlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a2ml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterA2ml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitA2ml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitA2ml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public A2mlContext a2ml() {
		A2mlContext _localctx = new A2mlContext(Context, State);
		EnterRule(_localctx, 0, RULE_a2ml);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(Begin);
			State = 51;
			Match(T__0);
			State = 55;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 52;
					declaration();
					}
					} 
				}
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 58;
			Match(End);
			State = 59;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_definitionContext block_definition() {
			return GetRuleContext<Block_definitionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__16:
			case T__19:
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				type_definition();
				State = 62;
				Match(T__1);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				block_definition();
				State = 65;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Predefined_type_nameContext predefined_type_name() {
			return GetRuleContext<Predefined_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_nameContext struct_type_name() {
			return GetRuleContext<Struct_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedstruct_type_nameContext taggedstruct_type_name() {
			return GetRuleContext<Taggedstruct_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedunion_type_nameContext taggedunion_type_name() {
			return GetRuleContext<Taggedunion_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_type_name);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				predefined_type_name();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				struct_type_name();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				taggedstruct_type_name();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74;
				taggedunion_type_name();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				enum_type_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_type_nameContext : ParserRuleContext {
		public Predefined_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterPredefined_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitPredefined_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_type_nameContext predefined_type_name() {
		Predefined_type_nameContext _localctx = new Predefined_type_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_predefined_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Block_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterBlock_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitBlock_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_definitionContext block_definition() {
		Block_definitionContext _localctx = new Block_definitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_block_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__10);
			State = 81;
			tag();
			State = 82;
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterEnum_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitEnum_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_nameContext enum_type_name() {
		Enum_type_nameContext _localctx = new Enum_type_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_enum_type_name);
		int _la;
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(T__11);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CIdent) {
					{
					State = 85;
					identifier();
					}
				}

				State = 88;
				Match(T__12);
				State = 89;
				enumerator_list();
				State = 90;
				Match(T__13);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				Match(T__11);
				State = 93;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public Enumerator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterEnumerator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitEnumerator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_listContext enumerator_list() {
		Enumerator_listContext _localctx = new Enumerator_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumerator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			enumerator();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 97;
				Match(T__14);
				State = 98;
				enumerator_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			keyword();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 102;
				Match(T__15);
				State = 103;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_listContext struct_member_list() {
			return GetRuleContext<Struct_member_listContext>(0);
		}
		public Struct_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterStruct_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitStruct_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_nameContext struct_type_name() {
		Struct_type_nameContext _localctx = new Struct_type_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_type_name);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(T__16);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CIdent) {
					{
					State = 107;
					identifier();
					}
				}

				State = 110;
				Match(T__12);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__16) | (1L << T__19) | (1L << T__22))) != 0)) {
					{
					State = 111;
					struct_member_list();
					}
				}

				State = 114;
				Match(T__13);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				Match(T__16);
				State = 116;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_memberContext struct_member() {
			return GetRuleContext<Struct_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_listContext struct_member_list() {
			return GetRuleContext<Struct_member_listContext>(0);
		}
		public Struct_member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterStruct_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitStruct_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_listContext struct_member_list() {
		Struct_member_listContext _localctx = new Struct_member_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct_member_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			struct_member();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__16) | (1L << T__19) | (1L << T__22))) != 0)) {
				{
				State = 120;
				struct_member_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public Struct_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterStruct_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitStruct_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_memberContext struct_member() {
		Struct_memberContext _localctx = new Struct_memberContext(Context, State);
		EnterRule(_localctx, 22, RULE_struct_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			member();
			State = 124;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 24, RULE_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			type_name();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 127;
				array_specifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		public Array_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterArray_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitArray_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_specifierContext array_specifier() {
		Array_specifierContext _localctx = new Array_specifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_array_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__17);
			State = 131;
			constant();
			State = 132;
			Match(T__18);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 133;
				array_specifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedstruct_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedstruct_member_listContext taggedstruct_member_list() {
			return GetRuleContext<Taggedstruct_member_listContext>(0);
		}
		public Taggedstruct_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedstruct_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedstruct_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedstruct_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedstruct_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedstruct_type_nameContext taggedstruct_type_name() {
		Taggedstruct_type_nameContext _localctx = new Taggedstruct_type_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_taggedstruct_type_name);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(T__19);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CIdent) {
					{
					State = 137;
					identifier();
					}
				}

				State = 140;
				Match(T__12);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__20) | (1L << STRING))) != 0)) {
					{
					State = 141;
					taggedstruct_member_list();
					}
				}

				State = 144;
				Match(T__13);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(T__19);
				State = 146;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedstruct_member_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Taggedstruct_memberContext taggedstruct_member() {
			return GetRuleContext<Taggedstruct_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedstruct_member_listContext taggedstruct_member_list() {
			return GetRuleContext<Taggedstruct_member_listContext>(0);
		}
		public Taggedstruct_member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedstruct_member_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedstruct_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedstruct_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedstruct_member_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedstruct_member_listContext taggedstruct_member_list() {
		Taggedstruct_member_listContext _localctx = new Taggedstruct_member_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_taggedstruct_member_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			taggedstruct_member();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__20) | (1L << STRING))) != 0)) {
				{
				State = 150;
				taggedstruct_member_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedstruct_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Taggedstruct_definitionContext taggedstruct_definition() {
			return GetRuleContext<Taggedstruct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_definitionContext block_definition() {
			return GetRuleContext<Block_definitionContext>(0);
		}
		public Taggedstruct_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedstruct_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedstruct_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedstruct_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedstruct_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedstruct_memberContext taggedstruct_member() {
		Taggedstruct_memberContext _localctx = new Taggedstruct_memberContext(Context, State);
		EnterRule(_localctx, 32, RULE_taggedstruct_member);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				taggedstruct_definition();
				State = 154;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(T__20);
				State = 157;
				taggedstruct_definition();
				State = 158;
				Match(T__21);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				block_definition();
				State = 161;
				Match(T__1);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				Match(T__20);
				State = 164;
				block_definition();
				State = 165;
				Match(T__21);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedstruct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public Taggedstruct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedstruct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedstruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedstruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedstruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedstruct_definitionContext taggedstruct_definition() {
		Taggedstruct_definitionContext _localctx = new Taggedstruct_definitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_taggedstruct_definition);
		int _la;
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				tag();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__16) | (1L << T__19) | (1L << T__22))) != 0)) {
					{
					State = 170;
					member();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				tag();
				State = 174;
				Match(T__20);
				State = 175;
				member();
				State = 176;
				Match(T__21);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedunion_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedunion_member_listContext taggedunion_member_list() {
			return GetRuleContext<Taggedunion_member_listContext>(0);
		}
		public Taggedunion_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedunion_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedunion_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedunion_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedunion_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedunion_type_nameContext taggedunion_type_name() {
		Taggedunion_type_nameContext _localctx = new Taggedunion_type_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_taggedunion_type_name);
		int _la;
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				Match(T__22);
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CIdent) {
					{
					State = 181;
					identifier();
					}
				}

				State = 184;
				Match(T__12);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10 || _la==STRING) {
					{
					State = 185;
					taggedunion_member_list();
					}
				}

				State = 188;
				Match(T__13);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				Match(T__22);
				State = 190;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Taggedunion_member_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tagged_union_memberContext tagged_union_member() {
			return GetRuleContext<Tagged_union_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Taggedunion_member_listContext taggedunion_member_list() {
			return GetRuleContext<Taggedunion_member_listContext>(0);
		}
		public Taggedunion_member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taggedunion_member_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTaggedunion_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTaggedunion_member_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaggedunion_member_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Taggedunion_member_listContext taggedunion_member_list() {
		Taggedunion_member_listContext _localctx = new Taggedunion_member_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_taggedunion_member_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			tagged_union_member();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10 || _la==STRING) {
				{
				State = 194;
				taggedunion_member_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tagged_union_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_definitionContext block_definition() {
			return GetRuleContext<Block_definitionContext>(0);
		}
		public Tagged_union_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagged_union_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTagged_union_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTagged_union_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagged_union_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tagged_union_memberContext tagged_union_member() {
		Tagged_union_memberContext _localctx = new Tagged_union_memberContext(Context, State);
		EnterRule(_localctx, 40, RULE_tagged_union_member);
		int _la;
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				tag();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__16) | (1L << T__19) | (1L << T__22))) != 0)) {
					{
					State = 198;
					member();
					}
				}

				State = 201;
				Match(T__1);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				block_definition();
				State = 204;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIdent() { return GetToken(AMLParser.CIdent, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(CIdent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AMLParser.STRING, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 44, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AMLParser.STRING, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 46, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AMLParser.NUMBER, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAMLListener typedListener = listener as IAMLListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAMLVisitor<TResult> typedVisitor = visitor as IAMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 48, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xDB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x38', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', ';', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x46', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'Y', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x61', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x66', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'k', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', 'o', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 's', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', 'x', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '|', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x83', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x89', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x8D', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x91', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x96', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x9A', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xAA', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xAE', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xB5', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xB9', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xBD', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC2', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xC6', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xCA', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xD1', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x39', '\x2', '\x1B', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x2', '\x3', '\x3', '\x2', '\x5', '\f', '\x2', '\xE0', '\x2', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'G', '\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'P', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '`', '\x3', '\x2', '\x2', '\x2', '\x10', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'g', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x16', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '}', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x84', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x95', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x97', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '$', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xC1', '\x3', '\x2', '\x2', '\x2', '(', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xD0', '\x3', '\x2', '\x2', '\x2', ',', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\a', '\x1A', '\x2', '\x2', '\x35', '\x39', '\a', 
		'\x3', '\x2', '\x2', '\x36', '\x38', '\x5', '\x4', '\x3', '\x2', '\x37', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', ';', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\x1B', '\x2', '\x2', '=', 
		'>', '\a', '\x3', '\x2', '\x2', '>', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x5', '\x6', '\x4', '\x2', '@', '\x41', '\a', '\x4', '\x2', 
		'\x2', '\x41', '\x46', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', 
		'\f', '\a', '\x2', '\x43', '\x44', '\a', '\x4', '\x2', '\x2', '\x44', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x5', '\b', '\x5', '\x2', 'H', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'O', '\x5', '\n', '\x6', '\x2', 'J', 'O', '\x5', 
		'\x14', '\v', '\x2', 'K', 'O', '\x5', '\x1E', '\x10', '\x2', 'L', 'O', 
		'\x5', '&', '\x14', '\x2', 'M', 'O', '\x5', '\xE', '\b', '\x2', 'N', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 
		'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\t', '\x2', '\x2', '\x2', 'Q', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\r', '\x2', '\x2', 'S', 'T', '\x5', '.', '\x18', 
		'\x2', 'T', 'U', '\x5', '\b', '\x5', '\x2', 'U', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'X', '\a', '\xE', '\x2', '\x2', 'W', 'Y', '\x5', ',', '\x17', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\xF', '\x2', 
		'\x2', '[', '\\', '\x5', '\x10', '\t', '\x2', '\\', ']', '\a', '\x10', 
		'\x2', '\x2', ']', '\x61', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'\xE', '\x2', '\x2', '_', '\x61', '\x5', ',', '\x17', '\x2', '`', 'V', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x5', '\x12', '\n', 
		'\x2', '\x63', '\x64', '\a', '\x11', '\x2', '\x2', '\x64', '\x66', '\x5', 
		'\x10', '\t', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'j', '\x5', '\x30', '\x19', '\x2', 'h', 'i', '\a', '\x12', 
		'\x2', '\x2', 'i', 'k', '\x5', '\x32', '\x1A', '\x2', 'j', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x13', '\x2', '\x2', 'm', 
		'o', '\x5', ',', '\x17', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\a', '\xF', '\x2', '\x2', 'q', 's', '\x5', '\x16', '\f', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'x', '\a', '\x10', '\x2', '\x2', 
		'u', 'v', '\a', '\x13', '\x2', '\x2', 'v', 'x', '\x5', ',', '\x17', '\x2', 
		'w', 'l', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x15', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x5', '\x18', '\r', 
		'\x2', 'z', '|', '\x5', '\x16', '\f', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x5', '\x1A', '\xE', '\x2', '~', '\x7F', '\a', 
		'\x4', '\x2', '\x2', '\x7F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\x5', '\b', '\x5', '\x2', '\x81', '\x83', '\x5', '\x1C', '\xF', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\x14', '\x2', '\x2', '\x85', '\x86', '\x5', '\x32', '\x1A', 
		'\x2', '\x86', '\x88', '\a', '\x15', '\x2', '\x2', '\x87', '\x89', '\x5', 
		'\x1C', '\xF', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8C', '\a', '\x16', '\x2', '\x2', '\x8B', '\x8D', '\x5', 
		',', '\x17', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x90', '\a', '\xF', '\x2', '\x2', '\x8F', '\x91', '\x5', 
		' ', '\x11', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x96', '\a', '\x10', '\x2', '\x2', '\x93', '\x94', '\a', 
		'\x16', '\x2', '\x2', '\x94', '\x96', '\x5', ',', '\x17', '\x2', '\x95', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\x5', 
		'\"', '\x12', '\x2', '\x98', '\x9A', '\x5', ' ', '\x11', '\x2', '\x99', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '!', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', 
		'$', '\x13', '\x2', '\x9C', '\x9D', '\a', '\x4', '\x2', '\x2', '\x9D', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x17', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '$', '\x13', '\x2', '\xA0', '\xA1', '\a', 
		'\x18', '\x2', '\x2', '\xA1', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\f', '\a', '\x2', '\xA3', '\xA4', '\a', '\x4', '\x2', 
		'\x2', '\xA4', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x17', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\f', '\a', '\x2', '\xA7', 
		'\xA8', '\a', '\x18', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xAA', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAD', '\x5', '.', '\x18', '\x2', '\xAC', '\xAE', '\x5', 
		'\x1A', '\xE', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x5', '.', '\x18', '\x2', '\xB0', '\xB1', '\a', 
		'\x17', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x1A', '\xE', '\x2', '\xB2', 
		'\xB3', '\a', '\x18', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '%', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\a', '\x19', '\x2', '\x2', '\xB7', '\xB9', '\x5', ',', '\x17', 
		'\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBC', '\a', '\xF', '\x2', '\x2', '\xBB', '\xBD', '\x5', '(', '\x15', 
		'\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC2', '\a', '\x10', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x19', '\x2', 
		'\x2', '\xC0', '\xC2', '\x5', ',', '\x17', '\x2', '\xC1', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x5', '*', '\x16', 
		'\x2', '\xC4', '\xC6', '\x5', '(', '\x15', '\x2', '\xC5', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		')', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x5', '.', '\x18', '\x2', 
		'\xC8', '\xCA', '\x5', '\x1A', '\xE', '\x2', '\xC9', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x4', '\x2', '\x2', 
		'\xCC', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\f', 
		'\a', '\x2', '\xCE', '\xCF', '\a', '\x4', '\x2', '\x2', '\xCF', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD1', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', '\x1C', '\x2', '\x2', '\xD3', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x1E', '\x2', '\x2', 
		'\xD5', '/', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x1E', 
		'\x2', '\x2', '\xD7', '\x31', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\a', ' ', '\x2', '\x2', '\xD9', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x39', '\x45', 'N', 'X', '`', '\x65', 'j', 'n', 'r', 'w', '{', '\x82', 
		'\x88', '\x8C', '\x90', '\x95', '\x99', '\xA9', '\xAD', '\xB4', '\xB8', 
		'\xBC', '\xC1', '\xC5', '\xC9', '\xD0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace a2mlcsharp
